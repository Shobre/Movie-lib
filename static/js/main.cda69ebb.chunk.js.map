{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["API_KEY","API_URL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMovie","fetch","concat","state","movie","then","resp","json","data","console","log","updatedMovies","movies","push","setState","movieInfo","handleChange","bind","assertThisInitialized","handleSubmit","getByTitle","event","target","value","preventDefault","react_default","a","createElement","className","src","logo","alt","onSubmit","type","onChange","Title","Plot","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAIMA,SAAU,YACVC,EAAU,2BAyDDC,cAtDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBRQ,SAAW,WACTC,MAAMX,EAAO,KAAAY,OAAQT,EAAKU,MAAMC,MAAnB,sBAAAF,OAA6Cb,IACvDgB,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAAgBlB,EAAKU,MAAMS,OACjCD,EAAcE,KAAKL,GACnBf,EAAKqB,SAAS,CAAEF,OAAQD,EAAeI,UAAWP,IAClDC,QAAQC,IAAIjB,EAAKU,MAAMS,WA5B3BnB,EAAKU,MAAQ,CACXC,MAAO,GACPQ,OAAQ,GACRG,UAAW,IAEbtB,EAAKuB,aAAevB,EAAKuB,aAAaC,KAAlBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACpBA,EAAK0B,aAAe1B,EAAK0B,aAAaF,KAAlBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACpBA,EAAK2B,WAAa9B,EAAO,KAAAY,OAAQT,EAAKU,MAAMC,MAAnB,sBAAAF,OAA6Cb,GATrDI,4EAYN4B,GACXzB,KAAKkB,SAAS,CAAEV,MAAOiB,EAAMC,OAAOC,6CAGzBF,GACXzB,KAAKI,WACLS,QAAQC,IAAId,KAAKO,MAAMC,OACvBiB,EAAMG,kDAgBN,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAClBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAG7CN,EAAAC,EAAAC,cAAA,QAAMK,SAAUpC,KAAKuB,cACnBM,EAAAC,EAAAC,cAAA,6BAEEF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOV,MAAO3B,KAAKO,MAAMC,MAAO8B,SAAUtC,KAAKoB,gBAE7DS,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASV,MAAM,YAG3BE,EAAAC,EAAAC,cAAA,UAAK/B,KAAKO,MAAMY,UAAUoB,OAC1BV,EAAAC,EAAAC,cAAA,SAAI/B,KAAKO,MAAMY,UAAUqB,cAlDfC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.cda69ebb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst API_KEY = \"ee7eedf5\";\nconst API_URL = \"http://www.omdbapi.com/?\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: \"\",\n      movies: [],\n      movieInfo: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getByTitle = API_URL + `t=${this.state.movie}&plot=full&apikey=${API_KEY}`;\n  }\n\n  handleChange(event) {\n    this.setState({ movie: event.target.value });\n  }\n\n  handleSubmit(event) {\n    this.getMovie();\n    console.log(this.state.movie)\n    event.preventDefault();\n  }\n\n  getMovie = () => {\n    fetch(API_URL + `t=${this.state.movie}&plot=full&apikey=${API_KEY}`)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data);\n        const updatedMovies = this.state.movies;\n        updatedMovies.push(data);\n        this.setState({ movies: updatedMovies, movieInfo: data });\n        console.log(this.state.movies);\n      });\n  }\n  \n  render() {\n    return <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Search title:\n          <input type=\"text\" value={this.state.movie} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      \n        <h1>{this.state.movieInfo.Title}</h1>\n        <p>{this.state.movieInfo.Plot}</p>\n      </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}